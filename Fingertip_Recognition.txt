KINECT, WHAT IS IT AND HOW IT WORKS
The Kinect sensor is composed by an RGB camera, which is similar to an autofocus webcam, with an 8-bit VGA resolution of 640 480 pixels at 30 frames per second (fps) and using a Bayer color filter.

The depth sensor uses an infrared laser projector combined with a monochrome CMOS sensor, allowing to capture data under any light conditions, with 
11-bit depth resolution that provides 2048 levels of sensitivity. The combination of the RGB camera in the visible range with
the infrared depth sensor realizes the so called “RGB-D sensor.”

In addition, four microphones are used in a directional array
to implement vocal commands; the audio is processed with a
16-bit resolution at 16 KHz sampling rate.

Finally, a tilt motor is also present, in such a way that Kinect can change its position on both vertical and horizontal axes.

The reconstruction comes out by differences: the projector emits the pattern and the IR camera catches the reflected pattern. By using some parallel computer vision algorithms, which are commonly known as “Light Coding”
, Kinect succeeds in reconstructing the depth map.

FINGERTIP RECOGNITION
Done in several steps:

1. Sampling and Segmentation of the Hand
Pixels of the hand-point mostly lie on the hand contour but its shape is often defined roughly. 
First, we build a matrix with depth information; then, for every pixel of the image, its distance from the
hand-point along the three axes is checked: if it is less than a
threshold, the point will be identified as belonging to the hand.

2. Noise Canceling
As in every signal processing application, noise is a big problem that could dramatically reduce performances. 
We try to reduce noise using some functions from the OpenCV library, 
aiming to get a more suitable contour of the hand and have
 less points to analyze. cvErode will do an erosion of pixels in
 excess through the use of a very little image with a predefined
 kernel; it can be seen as the computation of local minima on the
 kernel area. cvMorphologyEx is an advanced morphological
operator that will compute the geometric shape of the hand.

3. Hand Contour Detection
We use in this step the cvFindContours function from
 OpenCV to find the contour of the hand. This function will return a pointer to a sequence containing all the points regarding
 the hand contour.

4. Contour Approximation
Bearing in mind the main goal of our application, it is convenient to work with a piecewise linear contour of the hand
 shape instead of a smoothed and curvilinear one, although the
 latter is much more realistic. This can be achieved by using the
 cvApproxPoly function from OpenCV, which approximates one
 or more curves using the well-known “Douglas-Peucker” algorithm 
 that reduces the number of points representing the considered curve.

5. Computation of the Center of Mass
To find out the center of mass (CoM) of the hand the general theory of moments of an image is used. The function
 cvMoment in OpenCV returns image moments up to the third
 order, allowing the straightforward determination of the CoM.
 As it will be explained successively, the CoM will be used either when points are to be considered as fingertips or not.

6. Determination of the Convex Envelope
A convex envelope of a set of points is the smallest convex
 set that contains those points. The cvConvexHull function of
 OpenCV is used to retrieve the envelope of an object. In our
 case, we are looking for the envelope of the approximated
 hand’s contour. This function uses the Sklansky’s algorithm
 to find the convex envelope of an n-dimensional polygon.
The first step of this method finds the point having the lowest
 Y-coordinate; then, the remaining points are labeled in a
 clockwise order. For each point in the cue, it is checked if three
points at time form either a “right turn” or a “left turn” .
In the
 first case, the second-to-last point is not part of the convex hull
 and it has to be removed from the cue; otherwise, this point
 would be part of the convex envelope (i.e., of the hand in our
case). This process goes on for every point in the stack and
 the resulting set of points will be the convex hull of the object
 under examination. 
We outline that, by
 this elaboration, the convex envelope is determined by a subset
 of points of the hand’s contour and so, surely there will be
 points in this set representing the fingertips.

7. Computation of the Convexity Defects
By using the OpenCV function cvConvexityDefects applied
 to the hand’s contour and to the convex hull determined in the
 previous step, we can identify the convexity defects of the contour. In the case of a hand, six different defects should be obtained. Each defect is identified by three
 points of the contour: the point where the defect starts, the point
 where the defect ends, the depth point that is the farthest from the convex hull within the defect. These points are used successively to isolate and identify fingertips.

NOTE: we are using an approximated
 piecewise linear contour of the hand. This also reduces the computational complexity of the proposed approach. In fact, for any
 vertex in the convex envelope, we may consider the straight
 lines of the contour that meet at this vertex. These lines start
 from the points of the hand’s contour that are, respectively, prior
 to and next to the considered vertex. Consequently,
 those points can be considered as a good approximation of the
 depth points within the closest convexity defects and so, we
 need not to invoke the cvConvexityDefects function. Evidently,
 this assumption is valid only if the considered vertex of the envelope is actually a fingertip.
